// <auto-generated />
using System;
using ElearningApplication.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Elearning.Migrations
{
    [DbContext(typeof(ELearningDbContext))]
    partial class ELearningDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ElearningApplication.Models.Entities.Answer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PasswordResetStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL");

                    b.HasIndex("TeacherId")
                        .IsUnique()
                        .HasFilter("[TeacherId] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ApplicationUserRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ClassDay", b =>
                {
                    b.Property<Guid>("ClassDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassDayName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("OnlineClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassDayId");

                    b.HasIndex("OnlineClassId");

                    b.ToTable("ClassDays");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchoolYear")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("CourseId");

                    b.HasIndex("GradeId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Exam", b =>
                {
                    b.Property<Guid>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ScoreLevel")
                        .HasColumnType("int");

                    b.HasKey("ExamId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ExamDetail", b =>
                {
                    b.Property<Guid>("ExamDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("AttachFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExamTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("isAttached")
                        .HasColumnType("bit");

                    b.HasKey("ExamDetailId");

                    b.HasIndex("ExamId");

                    b.HasIndex("ExamTypeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ExamDetails");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ExamDetailOriginClass", b =>
                {
                    b.Property<Guid>("ExamDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OriginClassId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExamDetailId", "OriginClassId");

                    b.HasIndex("OriginClassId");

                    b.ToTable("ExamDetailOriginClasses");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ExamStudent", b =>
                {
                    b.Property<Guid>("ExamDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("AttachFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CompletedDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CompletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExamDetailId", "StudentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ExamStudents");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ExamType", b =>
                {
                    b.Property<Guid>("ExamTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExamTypeName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ExamTypeId");

                    b.ToTable("ExamTypes");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Grade", b =>
                {
                    b.Property<Guid>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GradeName")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("GradeId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OnlineClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MessageId");

                    b.HasIndex("OnlineClassId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.OnlineClass", b =>
                {
                    b.Property<Guid>("OnlineClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassLink")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OnlineClassTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PasswordClass")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StudyTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubjectOriginClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("closedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isAutomaticalStart")
                        .HasColumnType("bit");

                    b.Property<bool>("isSave")
                        .HasColumnType("bit");

                    b.Property<bool>("isShareClass")
                        .HasColumnType("bit");

                    b.HasKey("OnlineClassId");

                    b.HasIndex("SubjectOriginClassId")
                        .IsUnique();

                    b.HasIndex("TeacherId");

                    b.ToTable("OnlineClasses");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.OriginClass", b =>
                {
                    b.Property<Guid>("OriginClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OriginClassName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OriginClassId");

                    b.HasIndex("GradeId");

                    b.HasIndex("TeacherId")
                        .IsUnique();

                    b.ToTable("OriginClasses");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.OTP", b =>
                {
                    b.Property<Guid>("OTPId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OTPId");

                    b.HasIndex("Id");

                    b.ToTable("OTPs");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OnlineClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionId");

                    b.HasIndex("OnlineClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OriginClassId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("GradeId");

                    b.HasIndex("OriginClassId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.StudentClassDay", b =>
                {
                    b.Property<Guid>("ClassDayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StayingTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassDayId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentClassDays");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Subject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.SubjectOriginClass", b =>
                {
                    b.Property<Guid>("SubjectOriginClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OriginClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubjectOriginClassId");

                    b.HasIndex("OriginClassId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectOriginClasses");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Teacher", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.HasKey("TeacherId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Term", b =>
                {
                    b.Property<Guid>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TermName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TermYear")
                        .HasColumnType("int");

                    b.HasKey("TermId");

                    b.HasIndex("CourseId");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.TermSubject", b =>
                {
                    b.Property<Guid>("TermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TermId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("TermSubjects");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Answer", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.Student", "Student")
                        .WithMany("Answers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElearningApplication.Models.Entities.Teacher", "Teacher")
                        .WithMany("Answers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Question");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ApplicationUser", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.Student", "Student")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("ElearningApplication.Models.Entities.ApplicationUser", "StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElearningApplication.Models.Entities.Teacher", "Teacher")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("ElearningApplication.Models.Entities.ApplicationUser", "TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ClassDay", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.OnlineClass", "onlineClass")
                        .WithMany("ClassDays")
                        .HasForeignKey("OnlineClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("onlineClass");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Course", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.Grade", "Grade")
                        .WithMany("Courses")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ExamDetail", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.Exam", "Exam")
                        .WithMany("ExamDetails")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.ExamType", "ExamType")
                        .WithMany("examDetails")
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.Subject", "Subject")
                        .WithMany("ExamDetails")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("ExamType");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ExamDetailOriginClass", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.ExamDetail", "ExamDetail")
                        .WithMany("examDetailOriginClasses")
                        .HasForeignKey("ExamDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.OriginClass", "OriginClass")
                        .WithMany("examDetailOriginClasses")
                        .HasForeignKey("OriginClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamDetail");

                    b.Navigation("OriginClass");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ExamStudent", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.ExamDetail", "ExamDetail")
                        .WithMany("ExamStudents")
                        .HasForeignKey("ExamDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.Student", "Student")
                        .WithMany("ExamStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.Teacher", "Teacher")
                        .WithMany("ExamStudents")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExamDetail");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Message", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.OnlineClass", "OnlineClass")
                        .WithMany("Messages")
                        .HasForeignKey("OnlineClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.Student", "Student")
                        .WithMany("Messages")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ElearningApplication.Models.Entities.Teacher", "Teacher")
                        .WithMany("Messages")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OnlineClass");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.OnlineClass", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.SubjectOriginClass", "SubjectOriginClass")
                        .WithOne("OnlineClass")
                        .HasForeignKey("ElearningApplication.Models.Entities.OnlineClass", "SubjectOriginClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.Teacher", "Teacher")
                        .WithMany("OnlineClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubjectOriginClass");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.OriginClass", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.Grade", "Grade")
                        .WithMany("originClasses")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.Teacher", "Teacher")
                        .WithOne("OriginClass")
                        .HasForeignKey("ElearningApplication.Models.Entities.OriginClass", "TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.OTP", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("OTPs")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Question", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.OnlineClass", "OnlineClass")
                        .WithMany("Questions")
                        .HasForeignKey("OnlineClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.Student", "Student")
                        .WithMany("Questions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OnlineClass");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Student", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.Grade", "Grade")
                        .WithMany("Students")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.OriginClass", "originClass")
                        .WithMany("Students")
                        .HasForeignKey("OriginClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Grade");

                    b.Navigation("originClass");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.StudentClassDay", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.ClassDay", "ClassDay")
                        .WithMany("StudentClassDays")
                        .HasForeignKey("ClassDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.Student", "Student")
                        .WithMany("StudentClassDays")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassDay");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Subject", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.Teacher", "Teacher")
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.SubjectOriginClass", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.OriginClass", "OriginClass")
                        .WithMany("SubjectOriginClasses")
                        .HasForeignKey("OriginClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.Subject", "Subject")
                        .WithMany("subjectOriginClasses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.Teacher", "Teacher")
                        .WithMany("SubjectOriginClasses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OriginClass");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Term", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.Course", "Course")
                        .WithMany("Terms")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.TermSubject", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.Subject", "Subject")
                        .WithMany("TermSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElearningApplication.Models.Entities.Term", "Term")
                        .WithMany("TermSubjects")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ElearningApplication.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ApplicationUser", b =>
                {
                    b.Navigation("OTPs");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ClassDay", b =>
                {
                    b.Navigation("StudentClassDays");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Course", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Terms");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Exam", b =>
                {
                    b.Navigation("ExamDetails");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ExamDetail", b =>
                {
                    b.Navigation("ExamStudents");

                    b.Navigation("examDetailOriginClasses");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.ExamType", b =>
                {
                    b.Navigation("examDetails");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Grade", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Students");

                    b.Navigation("originClasses");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.OnlineClass", b =>
                {
                    b.Navigation("ClassDays");

                    b.Navigation("Messages");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.OriginClass", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("SubjectOriginClasses");

                    b.Navigation("examDetailOriginClasses");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Student", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("ApplicationUser")
                        .IsRequired();

                    b.Navigation("ExamStudents");

                    b.Navigation("Messages");

                    b.Navigation("Questions");

                    b.Navigation("StudentClassDays");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Subject", b =>
                {
                    b.Navigation("ExamDetails");

                    b.Navigation("TermSubjects");

                    b.Navigation("subjectOriginClasses");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.SubjectOriginClass", b =>
                {
                    b.Navigation("OnlineClass")
                        .IsRequired();
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Teacher", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("ApplicationUser")
                        .IsRequired();

                    b.Navigation("ExamStudents");

                    b.Navigation("Messages");

                    b.Navigation("OnlineClasses");

                    b.Navigation("OriginClass")
                        .IsRequired();

                    b.Navigation("SubjectOriginClasses");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("ElearningApplication.Models.Entities.Term", b =>
                {
                    b.Navigation("TermSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
